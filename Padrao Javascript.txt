/*
  üìò Boas Pr√°ticas em JavaScript

  ‚ú® Organiza√ß√£o e Legibilidade
  - Use nomes de vari√°veis e fun√ß√µes descritivos e claros (ex: getUserData, totalAmount).
  - Escreva fun√ß√µes pequenas e com responsabilidade √∫nica.
  - Quebre trechos complexos em fun√ß√µes auxiliares para facilitar a leitura.
  - Comente partes importantes, mas evite coment√°rios redundantes.

  ‚ú® Declara√ß√£o de Vari√°veis
  - Sempre prefira `const` e `let` ao inv√©s de `var`.
    ‚Üí Use `const` para valores que n√£o mudam.
    ‚Üí Use `let` para valores que mudam ao longo do tempo.

  ‚ú® Manipula√ß√£o de DOM
  - Sempre verifique se os elementos existem antes de manipul√°-los.
  - Prefira `document.querySelector` e `querySelectorAll` pela flexibilidade.
  - Evite acoplamento excessivo com IDs ‚Äî prefira classes quando poss√≠vel.

  ‚ú® Condicionais e Valida√ß√µes
  - Use `===` e `!==` no lugar de `==` e `!=` para evitar coer√ß√£o de tipo.
  - Valide sempre entradas do usu√°rio.
  - Use `try/catch` para capturar erros em trechos cr√≠ticos (ex: convers√µes de dados, requisi√ß√µes, etc.).

  ‚ú® Boas Pr√°ticas Gerais
  - Mantenha seu c√≥digo indentado e padronizado (2 ou 4 espa√ßos).
  - Evite repeti√ß√£o de c√≥digo (DRY: Don‚Äôt Repeat Yourself).
  - Modularize o c√≥digo sempre que poss√≠vel (separando por responsabilidade).
  - Escreva mensagens de erro claras e √∫teis no console.

  ‚ú® Extras √∫teis
  - Use template strings (`` `Ol√°, ${nome}` ``) ao inv√©s de concatena√ß√£o com `+`.
  - Use arrow functions (`() => {}`) quando quiser fun√ß√µes curtas e sem `this`.
  - Evite poluir o escopo global ‚Äî use fun√ß√µes ou m√≥dulos para encapsular.

  ‚úÖ C√≥digo limpo √© mais importante que c√≥digo "esperto".

*/